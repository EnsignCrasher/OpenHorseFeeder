#!/bin/sh

i2c_fake() {
	case "${1}" in
		get)
			printf 'press 0 to return module closed or 1 for module open\n' >&2
			local _var
			read -r _var
			printf '%s\n' "${_var}"
			return
			;;
	esac
}

is_closed() {
	local _module_addr="${1}"
	local _ret
	_ret="$(i2c get "${_module_addr}")"
	if test "${_ret}" = 0; then
		printf 'true\n'
	else
		printf 'false\n'
	fi
}

run_status() {
	printf 'module\tstate<br>'
	for i in $(seq 48 53); do
		printf '%s\t' "${i}"
		local _state
		_state="$(/usr/bin/i2c get "${i}")"
		case "${_state}" in
			0)
				#printf '\e[1;32mclosed\e[0m\n'
				printf 'closed<br>'
				;;
			1)
				printf 'open<br>'
				;;
		esac
	done
}

run_feed() {
	local _first=48
	local _last=53
	for i in $(seq "${_first}" "${_last}" | tac); do
		if ! _cur_is_closed="$(is_closed "${i}")"; then
			printf 'module %s is unavailable\n' "${i}" >&2
			exit 1
		fi

		if ! "${_cur_is_closed}"; then
			continue
		fi

		printf 'opening module %s\n' "${i}"
		i2c set "${i}" 1
		sleep 3
		_cur_is_closed="$(is_closed "${i}")"
		if "${_cur_is_closed}"; then
			printf 'module %s got stuck\n' "${i}" >&2
			exit 1
		fi
		exit 0
	done

	printf 'All modules are already open\n' >&2
	exit 1
}

set -e
set -u

while :; do
	case "${1-}" in
		--dryrun)
			i2c() { i2c_fake "$@"; }
			shift
			;;
		*)
			break
			;;
	esac
done

run_"${1?Missing mode}"
